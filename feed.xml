<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Xtt's Blog</title>
    <link href="" rel="self" />
    <link href="http://xuting.me/" />
    <updated>2016-10-20T10:30:00Z</updated>
    <id>http://xuting.me/</id>
    
    <entry>
        <title><![CDATA[微信公众号开发--微信机器人]]></title>
        <author><name>xtt</name><uri>http://xuting.me/</uri></author>
        <link href="http://xuting.me/weixinrobot/"/>
        <updated>2016-10-20T10:30:00Z</updated>
        <published>2016-10-20T10:30:00Z</published>
        <id>http://xuting.me/weixinrobot/</id>
        <content type="html">
            <![CDATA[
             <blockquote>
<p>抱着了解微信公众号开发流程的目的看了一些文档，摸索了几天然后照着搭了一个简单的python微信公众号，主要功能是一个微信机器人，可以聊天和生活百科咨询，记录一下仅供参考。</p>
</blockquote>

<p>开发需要：<br></p>

<p><ol></p>

<p><li>配置python本地环境</li></p>

<p><li>新浪云SAE</li></p>

<p><li>Git代码托管</li></p>

<p><li>微信公众号</li></p>

<p></lo></p>

<p>前三步骤网上有很多教程可以根据教程一步一步搭建，主要写一下微信公众号的开发。</p>

<h2>一、服务器配置和Token认证</h2>

<p>之前在 SAE 平台创建的是空应用，所以我们需要做一些基础的配置工作。这次我们选择使用 web.py （Python 2.7）来进行服务器搭建，如果本地没有 web.py 库的话可以通过 pip 命令进行安装（pip install web.py）。</p>

<p>之后我们需要创建一个项目，并编辑如下的基本代码。</p>

<p>config.yaml</p>

<p><img src="http://7xpt78.com1.z0.glb.clouddn.com/blog/20161215/102929176.png" alt="mark"/></p>

<p>index.wsgi</p>

<p><img src="http://7xpt78.com1.z0.glb.clouddn.com/blog/20161215/103033967.png" alt="mark"/></p>

<p>这两部分是 web.py 的基础配置文件，之后我们需要开始编写实现微信公众平台功能的代码。</p>

<p>新建weixinInterface.py</p>

<p><img src="http://7xpt78.com1.z0.glb.clouddn.com/blog/20161215/103618936.png" alt="mark"/></p>

<p>编写好这三部分的代码后，我们就实现了最简单的微信平台认证配置，这三部分代码中需要修改的只有 token 字段，需要和你在微信平台中输入的 token 保持一致。（之后有机会再详细写具体的认证过程吧，这次只罗列一下实现过程，需要注意的是认证 token 我们只需要用 GET 方法而之后的发消息需要用 POST 方法。）</p>

<p>这时我们需要把代码上传到 SAE 平台，然后在微信平台进行认证请求。</p>

<p>在文件根目录右键打开 Git Bash，依次输入如下命令，过程中可能会需要输入 SAE 的用户名和安全密码，按照提示操作即可。  </p>

<blockquote>
<p>git init <br></p>

<p>git remote add sae <a href="https://git.sinacloud.com/>&ldquo;>https://git.sinacloud.com/></a> yourapp <br></p>

<p>git add . <br></p>

<p>git commit -m &#39;your commit message&#39; <br></p>

<p>git push sae master:1 <br></p>
</blockquote>

<p>之后回到公众平台的开发者页面，填写 URL 为 <a href="http://xxxx.sinaapp.com/weixin">http://xxxx.sinaapp.com/weixin</a> 填写 Token 与代码中的 token 一致，EncodingAESKey 随机生成，然后点击提交认证，如果上面步骤没有操作错误，这一步就可以认证成功了。</p>

<h2>二、简单的消回复机制</h2>

<p>用户与公众号之间的消息交互类型分为文本、图片、语音、视频、小视频、地理位置、链接等，本文中主要会用到文本和图片两种消息类型。</p>

<p>用户消息以 XML 形式传至我们搭建好的服务器中，我们需要解析 XML 信息，获取出需要的信息，进行处理后对用户回复结果。</p>

<p>文本： </p>

<blockquote>
<p><xml><br></p>

<p><ToUserName>&lt;![CDATA[toUser]]&gt;</ToUserName><br></p>

<p><FromUserName>&lt;![CDATA[fromUser]]&gt;</FromUserName><br></p>

<p><CreateTime>1348831860</CreateTime><br></p>

<p><MsgType>&lt;![CDATA[text]]&gt;</MsgType><br></p>

<p><Content>&lt;![CDATA[this is a test]]&gt;</Content><br></p>

<p><MsgId>1234567890123456</MsgId><br></p>

<p></xml><br></p>
</blockquote>

<p>图片：</p>

<blockquote>
<p><xml><br></p>

<p><ToUserName>&lt;![CDATA[toUser]]&gt;</ToUserName><br></p>

<p><FromUserName>&lt;![CDATA[fromUser]]&gt;</FromUserName><br></p>

<p><CreateTime>1348831860</CreateTime><br></p>

<p><MsgType>&lt;![CDATA[image]]&gt;</MsgType><br></p>

<p><PicUrl>&lt;![CDATA[this is a url]]&gt;</PicUrl><br></p>

<p><MediaId>&lt;![CDATA[media_id]]&gt;</MediaId><br></p>

<p><MsgId>1234567890123456</MsgId><br></p>

<p></xml><br></p>
</blockquote>

<p>可以看到，两者共有的字段为ToUserName、FromUserName、CreateTime、MsgType和MsgId，对于文本消息，我们可以通过Content字段直接提取出消息文本内容，但是对于图片消息，我们需要通过PicUrl或MediaId获取图片信息后进行处理。</p>

<p><img src="http://7xpt78.com1.z0.glb.clouddn.com/blog/20161215/103808302.png" alt="mark"/></p>

<h2>三、申请图灵机器人接口</h2>

<p>图灵机器人官网：</p>

<p><a href="http://www.tuling123.com/"><a href="http://www.tuling123.com/">http://www.tuling123.com/</a></a></p>

<p>1.注册账号</p>

<p>2.新建机器人</p>

<p>免费版每天可以调5000次，如果只是为了娱乐的开发应该就够用的了</p>

<p><img src="http://7xpt78.com1.z0.glb.clouddn.com/blog/20161215/105151047.png"></p>

<p>3.设置机器人的信息，添加需要的知识库</p>

<p><img src="http://7xpt78.com1.z0.glb.clouddn.com/blog/20161215/105348259.png" alt="mark"/></p>

<p>4.添加能力拓展功能</p>

<p><img src="http://7xpt78.com1.z0.glb.clouddn.com/blog/20161215/105425415.png" alt="mark"/></p>

<p>5.接入公众号</p>

<p><img src="http://7xpt78.com1.z0.glb.clouddn.com/blog/20161215/105505459.png" width=700></p>

<h2>四、微信公众号成果展示</h2>

<p>搜索微信名：徐九岁。 欢迎和我的女儿小九九做朋友，有任何生活问题、情感问题、单纯聊天解闷都可以找它啦~~</p>

<p>结果展示：  </p>

<p><img src="http://7xpt78.com1.z0.glb.clouddn.com/blog/20161215/104104594.png" width=240px></p>

<p><img src="http://7xpt78.com1.z0.glb.clouddn.com/blog/20161215/104410840.png" width=240px></p>

<p><img src="http://7xpt78.com1.z0.glb.clouddn.com/blog/20161215/104440165.png" width=240px></p>

<p><img src="http://7xpt78.com1.z0.glb.clouddn.com/blog/20161215/104501722.png" width=240px></p>

<p><img src="http://7xpt78.com1.z0.glb.clouddn.com/blog/20161215/104524173.png" width=240px></p>

<p><img src="http://7xpt78.com1.z0.glb.clouddn.com/blog/20161215/104546282.png" width=240px></p>

<p><img src="http://7xpt78.com1.z0.glb.clouddn.com/blog/20161215/104611251.png" width=240px></p>

<h2>五、代码托管地址</h2>

<p><a href="https://github.com/Evaxtt/weixinsub">微信机器人代码</a></p>

            ]]>
        </content>
    </entry>
    
    <entry>
        <title><![CDATA[HTML5 Boilerplate]]></title>
        <author><name>xtt</name><uri>http://xuting.me/</uri></author>
        <link href="http://xuting.me/H5BP/"/>
        <updated>2016-09-20T20:00:00Z</updated>
        <published>2016-09-20T20:00:00Z</published>
        <id>http://xuting.me/H5BP/</id>
        <content type="html">
            <![CDATA[
             <blockquote>
<p><a href="https://html5boilerplate.com/">HTML5 Boilerplate(H5BP)</a>是一个由 Paul Irish（Google Chrome 开发人员、jQuery 项目成员、Modernizr 作者、yayQuery 播客主持人）主导的“前端开发模版”,也可以简单理解为web前端的最佳实践的HTML+CSS+jquery模板集合，帮你构建 快速, 健壮, 并且适应力强的web app或网站。</p>
</blockquote>

<p>一、H5BP 特性简介</p>

<ul>
<li><p>首创在 HTML 页面的 body 上使用 IE 条件注释判断浏览器版本，从而大大简化了针对 IE Hack 的成本（在后来的版本中升级为在 <html> 标签中加入条件注释）</p></li>
<li><p>HTML5 集成，默认使用了很多 HTML5 的特性，并且使其兼容旧版本浏览器</p></li>
<li><p>大量针对服务器的默认配置，无需修改即可配置一个安全、标准的 web 服务器</p></li>
<li><p>完整的 JS 调试机制 —— 即使在 IE 下</p></li>
<li><p>大量使用 CSS3 技术，并且集成了几乎所有来自框架中和技术大牛们口头相传的 CSS 技巧</p></li>
<li><p>压缩包内包含了 一个干净、移动终端友好的HTML模版；优化过的Google统计代码；触摸屏设备上使用的图标；还有丰富的文档、技巧、窍门</p></li>
<li><p>包含了 Normalize.css— 一个先进的、支持HTML5的CSS reset — 和基础样式、辅助功能、media queries、打印样式</p></li>
<li><p>自带了两个优秀的Javascript工具库的最新版本： jQuery (默认链接到 Google的CDN, 如果CDN失效，本地文件作为后备) 和Modernizr 浏览器特性监测工具库，可以检测浏览器对新特性的支持能力，方便针对旧版本浏览</p></li>
<li><p>为所有浏览环境做了优化，包括移动版本和打印版本</p></li>
</ul>

<p>二、如何使用H5BP</p>

<ol>
  
<li>下载H5BP
  
<P>下载地址：<a href="https://html5boilerplate.com/">HTML5 Boilerplate(H5BP)</a>
  
</P>
  
</li>
  
<li>删除不必要的样板文件
  
<p>删除下列只与H5BP有关的文件：<br>
  
- CHANGELOG.md<br>
  
- CONTRIBUTING.md<br>
  
- doc文件夹及其内容<br>
  
- 删除css文件夹内不需要的样式文件<br>
  
</p></li>
  

  
<li>理解样板中的.htaccess文件<br>
  
建议先看一遍H5BP的文档（<a href="https://html5boilerplate.com/">https://html5boilerplate.com/</a>），此文件本身也有详细的注释，可以打开编辑器从头到尾看一遍，这个文件夹的内容不全都有用，主要取决于你的主机设置和站点需求，不过这个文件的一个主要用途是保证站点性能最优。
  
<p></p></li>
  

  
<li>可选择更新的样板文件<br>
  
<p>样板中的下列文件提供了项目的标准信息，根据需要可以更新它们：<br>
  
- humans.txt:这个文件记载了贡献者，H5BP、Bootstrap等<br>
  
- LICENSE.md:在H5BP许可前面，可加上你基于该许可构建的网站的许可信息，在H5BP许可之后，加上Bootstrap以及其他站点中用到的重要的库的许可信息。<br>
  
- README.md:加上自己的项目说明信息并更新这个文件。</p></li>
  

  
<li>更新站点桌面图标和触摸设备图标<br>
  
不要忘了用自己项目的图标替换H5BP默认的图标文件，包括以下图标:<br>
  
- apple-touch-icon.png:为确保所有移动设备都有最佳效果，这个图标应该是144px*144px方形图标<br>
  
- favicon.ico:32px方形图标<br>
  
<p></p></li>
  

  
<li>加入Bootstrap
  
文件
  
<p>
  
现在我们考虑把H5BP和bootstrap结合使用，我们需要从bootstrap提供的一大推文件中选出需要的部分：<br>  

  
<strong>- 字体：</strong><br>把fonts文件夹复制到H5BP文件夹的根目录，这个文件夹包含bootstrap重要的Glyphicon字体。<br>为保险起见，在这个fonts文件夹建一个.hatccsee文件，防止因为越来越多的CDN为你的网站缓存静态资源，如果没有这个文件某些浏览器会拒绝识别你的WEB字体，在创建的.hatccss文件中添加如下代码：<br>
  
<img src="http://7xpt78.com1.z0.glb.clouddn.com/H5BP.png"><br>  

  
<strong>- JavaScript<br></strong>
  
在js目录下创建一个bootstrap文件夹，然后把bootstrap的js脚本文件拷到这个文件夹下，便于优化网站性能，即可按需选用插件、排除其他文件并缩减文件大小。<br>
  
H5BP采用的方法是将所有的插件代码都复制到plugins.js模板文件，这是结束开发之后的最佳做法，因为这样可以减少http请求，加快站点的加载速度。所有现在我们需要找到Bootstrap文件夹下的bootstrap.min.js文件，打开->全选代码->复制->粘贴到plugins.js模板文件中->保存并退出。<br>  

  
<strong>- css文件<br></strong>  
<ol>
  
<li>第一种方法：可以直接把bootstrap的样式大文件拷贝到css文件夹内;</li>
  
<li>第二种方法：把bootstrap中重要的less文件夹全部复制过来：把bootstrap/less文件夹复制到H5BP文件夹的根目录下，然后使用less自定义编译css文件到css文件夹中。</li>  
</ol>
  

<p></p></p>

<p></li></p>

<p><li>大盘点</p>

<p>
  
此时的项目文件结构如下：<br>
  
<img src="http://7xpt78.com1.z0.glb.clouddn.com/H5BP3.png"><br>
  
</p>
  

<p></li></p>

<p></ol></p>

            ]]>
        </content>
    </entry>
    
    <entry>
        <title><![CDATA[Fidder]]></title>
        <author><name>xtt</name><uri>http://xuting.me/</uri></author>
        <link href="http://xuting.me/fidder/"/>
        <updated>2016-08-26T20:30:00Z</updated>
        <published>2016-08-26T20:30:00Z</published>
        <id>http://xuting.me/fidder/</id>
        <content type="html">
            <![CDATA[
             <blockquote>
<p>Fiddler是最强大最好用的Web调试工具之一，它能记录所有客户端和服务器的http和https请求，允许你监视，设置断点，甚至修改输入输出数据. 使用Fiddler无论对开发还是测试来说，都有很大的帮助。</p>
</blockquote>

<h2>一、Fiddler的基本介绍</h2>

<p>Fiddler的官方网站:  <a href="www.fiddler2.com"><a href="http://www.fiddler2.com">www.fiddler2.com</a></a></p>

<p>Fiddler官方网站提供了大量的帮助文档和视频教程， 这是学习Fiddler的最好资料。</p>

<p>Fiddler是最强大最好用的Web调试工具之一，它能记录所有客户端和服务器的http和https请求，允许你监视，设置断点，甚至修改输入输出数据，Fiddler包含了一个强大的基于事件脚本的子系统，并且能使用.net语言进行扩展</p>

<p>你对HTTP 协议越了解， 你就能越掌握Fiddler的使用方法. 你越使用Fiddler,就越能帮助你了解HTTP协议.</p>

<p>Fiddler无论对开发人员或者测试人员来说，都是非常有用的工具</p>

<h2>二、Fiddler的工作原理</h2>

<p>Fiddler 是以代理web服务器的形式工作的,它使用代理地址:127.0.0.1, 端口:8888. 当Fiddler会自动设置代理， 退出的时候它会自动注销代理，这样就不会影响别的程序。不过如果Fiddler非正常退出，这时候因为Fiddler没有自动注销，会造成网页无法访问。解决的办法是重新启动下Fiddler.<br></p>

<h2>三、同类的其它工具</h2>

<p>同类的工具有: httpwatch, firebug, wireshark</p>

<h2>四、Fiddler 如何捕获Firefox的会话</h2>

<p>能支持HTTP代理的任意程序的数据包都能被Fiddler嗅探到，Fiddler的运行机制其实就是本机上监听8888端口的HTTP代理。 Fiddler2启动的时候默认IE的代理设为了127.0.0.1:8888，而其他浏览器是需要手动设置的，所以将Firefox的代理改为127.0.0.1:8888就可以监听数据了。</p>

<p>Firefox 上通过如下步骤设置代理</p>

<p>点击: Tools -&gt; Options,  在Options 对话框上点击Advanced tab - &gt; network tab -&gt; setting.</p>

<h2>五、Firefox 中安装Fiddler插件</h2>

<p>修改Firefox 中的代理比较麻烦， 不用fiddler的时候还要去掉代理。 麻烦</p>

<p>推荐你在firefox中使用fiddler hook 插件, 这样你非常方便的使用Fiddler获取firefox中的request 和response</p>

<p>当你安装fiddler后， 就已经装好了Fiddler hook插件， 你需要到firefox中去启用这个插件</p>

<p>打开firefox   tools-&gt;Add ons -&gt; Extensions 启动 FiddlerHook<br></p>

<h2>六、Fiddler如何捕获HTTPS会话</h2>

<p>默认下，Fiddler不会捕获HTTPS会话，需要你设置下, 打开Fiddler  Tool-&gt;Fiddler Options-&gt;HTTPS tab,选中checkbox, 弹出的对话框，点击&quot;YES&quot;</p>

<p>点击&quot;Yes&quot; 后，就设置好了。</p>

            ]]>
        </content>
    </entry>
    
    <entry>
        <title><![CDATA[sublime text插件推荐]]></title>
        <author><name>xtt</name><uri>http://xuting.me/</uri></author>
        <link href="http://xuting.me/sublime_text_plug/"/>
        <updated>2016-07-23T13:00:00Z</updated>
        <published>2016-07-23T13:00:00Z</published>
        <id>http://xuting.me/sublime_text_plug/</id>
        <content type="html">
            <![CDATA[
             <blockquote>
<p>用了Sublime Text有一段时间了，之前被周围的几个前端小伙伴灌输的思想就是，牛b的前端程序员都是手写代码的，用代码提示啥的都low，然而上班之后被公司同事吐槽开发效率太低，因为不想换编辑器所以去下载了几个插件，发现写代码时的幸福感大大提升了  </p>
</blockquote>

<h3>一.Package Control</h3>

<blockquote>
<p>这是使用sublime text首先要装的插件，因为这是一个插件包，有了这个之后可以方便的安装、升级、删除其它插件。  </p>
</blockquote>

<p>1.快速安装：<br/>  </p>

<p>[sublime text2:]<br/><br/>
使用Ctrl+快捷键或者通过View-&gt;Show Console菜单打开命令行，粘贴如下代码：<br/>  </p>

<pre><code>import urllib.request,os; pf = &#39;Package Control.sublime-package&#39;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), &#39;wb&#39;).write(urllib.request.urlopen( &#39;http://sublime.wbond.net/&#39; + pf.replace(&#39; &#39;,&#39;%20&#39;)).read())</code></pre>

<p>[sublime text3:]<br/><br/>
使用Ctrl+快捷键或者通过View-&gt;Show Console菜单打开命令行，粘贴如下代码：<br/>  </p>

<pre><code>import urllib2,os; pf=&#39;Package Control.sublime-package&#39;; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler( ))); open( os.path.join( ipp, pf), &#39;wb&#39; ).write( urllib2.urlopen( &#39;http://sublime.wbond.net/&#39; +pf.replace( &#39; &#39;,&#39;%20&#39; )).read()); print( &#39;Please restart Sublime Text to finish installation&#39;)</code></pre>

<p>2.手动安装  </p>

<p>如果快速安装不成功的话，下载Package Control插件包手动解压到到插件目：<br/><br/>
（1）点击Preferences &gt; Browse Packages菜单<br/><br/>
（2）进入打开的目录的上层目录，然后再进入Installed Packages/目录<br/><br/>
（3）下载Package Control插件包并复制到Installed Packages/目录<br/><br/>
（4）重启Sublime Text。<br/>  </p>

<p>3.用Package Control安装插件的方法<br/>
（1）按下Ctrl+Shift+P调出命令面板<br/>
（2）输入install 调出 Install Package 选项并回车，然后在列表中选中要安装的插件即可自动下载安装。<br/>
（3）安装成功后在Preferences &gt;package settings目录下即可看到已经成功安装的插件，可以查看和自定义每个插件绑定的快捷键和参数设置。  </p>

<h3>二.相关插件</h3>

<blockquote>
<p>安装插件的方法已经介绍完了，下面开始介绍一些有用的Sublime Text插件：  </p>
</blockquote>

<h4>1.Emmet</h4>

<p>如果你是前端开发者，这个插件会大大的提高编码效率。例如：ul&gt;li*4 按下扩展键则立即生成一个四行的列表。插件文档：<a href="http://emmet.io/">http://emmet.io/</a>  </p>

<h4>2.JsFormat</h4>

<p>一个JS代码格式化插件。  </p>

<h4>3.CSSComb</h4>

<p>这是用来给CSS属性进行排序的格式化插件。如果你想保持的代码干净整洁，并且希望按一定的顺序排列，那么这个插件是一种有效解决的方案。  </p>

<h4>4.DocBlockr</h4>

<p>DocBlockr 可以使你很方便地对代码添加注释。在js的代码里的函数前面输入／＊＊按tab键，它会解析函数，变量，和参数，根据它们自动生成注释规范，你的工作就是去填充对应的说明。  </p>

<h4>5.Side Bar</h4>

<p>侧边栏功能加强插件，可以直接在sublime里面对文件执行很多复杂操作。  </p>

<h4>6.ColorPicker</h4>

<p>通常，如果我们需要一个调色盘的时候，我们习惯使用Photoshop或者其他工具。但是一个完整的选色工具可以直接在你的编辑器中使用- Ctrl/Cmd + Shift + C。  </p>

<h4>7. Colorcoder</h4>

<p>高亮所有变量，因此可以极大的简化代码定位。尤其是对那些有阅读障碍的程序员非常有帮助。  </p>

<h4>8.AutoFileName</h4>

<p>自动补全文件路径&mdash;非非常方便。  </p>

<h4>9.Better Completion</h4>

<p>提供Bootstrap，jQuery,JS,html等代码提示补全，我觉得这个很好用，很多时候会忘记一些函数属性名，有了这些自动提示效率和正确率都会提高很多。<br/><br/>
这个安装好后需要自行配制，CTRL+SHIFT+P或者 CMD+SHIFT+P之后在弹出的窗口中输入“sbc settings user”打开配置文件，输入下列代码，把需要代码提示的选项参数设置为true：  </p>

<pre><code>{  
// --------------------  
// sublime-better-completions-Package (sbc package)  
// --------------------  
// API files is contains the *keyword* such as `html`, `jquery`, `myglossary` with lowercase as filename `sbc-api-${filename}.sublime-settings` place in `/packages/User/` (your own) or `/packages/${this-package}/sublime-completions/` (package build-in).  
// After you enable, disable or added new your own completions, you might need restart your Sublime Text Editor.  
//  
// Your own setting file `sbc-setting.sublime-settings` need to place in `/packages/User/` and contains all your api setting property that you want to enable.  
//  
// --------------------  
// APIs Setup  
// --------------------  
// `true` means enable it.  
// `false` means disable it.  
&quot;completion_active_list&quot;: {  
    // build-in completions  
    &quot;css-properties&quot;: false,  
    &quot;gruntjs-plugins&quot;: false,  
    &quot;html&quot;: false,  
    &quot;lodash&quot;: false,  
    &quot;javascript&quot;: false,  
    &quot;jquery&quot;: false,  
    &quot;jquery-sq&quot;: false, // Single Quote  
    &quot;php&quot;: false,  
    &quot;phpci&quot;: false,  
    &quot;sql&quot;: false,  
    &quot;twitter-bootstrap&quot;: false,  
    &quot;twitter-bootstrap-less-variables&quot;: false,  
    &quot;twitter-bootstrap3&quot;: false,  
    &quot;underscorejs&quot;: false,  
    // Your own completions?  
    // ~/Library/Application\ Support/Sublime\ Text\ 3/Packages/User/sbc-api-my-angularjs.sublime-settings  
    &quot;my-angularjs&quot;: false,  
    // ~/Library/Application\ Support/Sublime\ Text\ 3/Packages/User/sbc-api-my-glossary.sublime-settings  
    &quot;my-glossary&quot;: false,  
    // ~/Library/Application\ Support/Sublime\ Text\ 3/Packages/User/sbc-api-my-html.sublime-settings  
    &quot;my-html&quot;: false,  
    // ~/Library/Application\ Support/Sublime\ Text\ 3/Packages/User/sbc-api-my-javascript.sublime-settings  
    &quot;my-javascript&quot;: false  
}  
}</code></pre>

<h4>10.MarkdownEditing</h4>

<p>Markdonw编辑提供语法高亮，缩略词，自动补全，配色方案。  </p>

<h4>11.SublimeREPL</h4>

<p>SublimeREPL 可以直接在编辑器中运行一个解释器，支持很多语言：Clojure, CoffeeScript, F#, Groovy, Haskell, Lua, MozRepl, NodeJS, Python, R, Ruby, Scala, shell.使用说明文档：<a href="http://sublimerepl.readthedocs.io/en/latest/">http://sublimerepl.readthedocs.io/en/latest/</a></p>

            ]]>
        </content>
    </entry>
    
    <entry>
        <title><![CDATA[是结束也是开始]]></title>
        <author><name>xtt</name><uri>http://xuting.me/</uri></author>
        <link href="http://xuting.me/end_and_start/"/>
        <updated>2016-06-29T23:00:00Z</updated>
        <published>2016-06-29T23:00:00Z</published>
        <id>http://xuting.me/end_and_start/</id>
        <content type="html">
            <![CDATA[
             <blockquote>
<p>窗外还在下雨，一个人窝在酒店里听了一晚上的歌，1号就要上班然而房子还没有弄好。今天清空了宿舍，爸爸和舅舅三两下把包裹搬好就出发来上海了，没有同学送别没有留恋，只有内心无人察觉的稍稍伤感。吃了无数顿散伙饭，说了无数次的有缘再见，今天才是真的再见，或者再也不见。  </p>
</blockquote>

<p>&nbsp; &nbsp; &nbsp; &nbsp;从毕业设计到现在玩了一个多月，很久没有写博客，很久没有静下心来看书敲代码，没有疯狂但也是一个很开心的毕业季。6月初一行人去了云南旅行，大理丽江苍山洱海玉龙雪山，天美水美景美人美，唯一的遗憾就是旅程太匆忙不能慢慢感受，有机会希望再去一次，在那住上半个月，去丽江酒吧把这次没来及唱的那首歌补上。接着就是毕业晚会，跳了一个逗逼的舞蹈唱了首不算太伤感的歌，圆了毕业前的最后一个心愿。学位授予仪式那天没能抱到熊校长也是一大遗憾，下雨天湿嗒嗒油腻腻的我被接受电视台采访，谈及熊校长迷妹本质暴露无疑＝＝毕业的最后印象被定格在电视荧幕上也算是一个纪念了。<br/><br/>
&nbsp; &nbsp; &nbsp; &nbsp;一不留神又写起了流水账，本来是听歌听到忧伤的想抒情一下，谁知回忆起这一个月的事情心情变好了很多，看来人是要经常记录经常回忆开心的事情。<br/><br/>
&nbsp; &nbsp; &nbsp; &nbsp;用什么来形容大学毕业合适呢？公交车的某一站台？虽然下了车但是终点还很遥远，还需要一个人走很长的路看很多的风景。毕业之前我总是害怕长大，害怕变老，希望简单、单纯、自由、任性；毕业之后我知道长大不可避免，但我害怕吗，好像并不，离开苏州，离开小伙伴好朋友们一个人来到上海，我一点也不害怕，因为这是我想做的，既然长大和变老都不能避免，最好的生活状态就是活出自己，在力所能及的情况下做自己想做的事情，我知道自己会一直保持一个孩子心，善良、好奇、自由、冒险，虽然这对于踏入社会的人来说并不是一件好事，但没有人知道什么样的我才是最好的，所以现在就是最好的时光。珍惜现在，多看书多学习，多做自己想做的事情。<br/><br/>
&nbsp; &nbsp; &nbsp; &nbsp; 《行歌》里说成长是一场冒险，勇敢的人先上路，代价是错过风景，不能回头。不能回头是真，错过风景是假，勇敢的人会看到更多的风景。</p>

            ]]>
        </content>
    </entry>
    
</feed>