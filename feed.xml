<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Xtt's Blog</title>
    <link href="" rel="self" />
    <link href="http://xuting.me/" />
    <updated>2016-08-26T20:00:00Z</updated>
    <id>http://xuting.me/</id>
    
    <entry>
        <title><![CDATA[HTML5 Boilerplate]]></title>
        <author><name>xtt</name><uri>http://xuting.me/</uri></author>
        <link href="http://xuting.me/H5BP/"/>
        <updated>2016-08-26T20:00:00Z</updated>
        <published>2016-08-26T20:00:00Z</published>
        <id>http://xuting.me/H5BP/</id>
        <content type="html">
            <![CDATA[
             <p><a href="https://html5boilerplate.com/">HTML5 Boilerplate(H5BP)</a>是一个由 Paul Irish（Google Chrome 开发人员、jQuery 项目成员、Modernizr 作者、yayQuery 播客主持人）主导的“前端开发模版”,也可以简单理解为web前端的最佳实践的HTML+CSS+jquery模板集合，帮你构建 快速, 健壮, 并且适应力强的web app或网站。</p>

<p>一、H5BP 特性简介</p>

<ul>
<li><p>由 Paul Irish 首创的在 HTML 页面的 body 上使用 IE 条件注释判断浏览器版本，从而大大简化了针对 IE Hack 的成本（在后来的版本中升级为在 <html> 标签中加入条件注释）</p></li>
<li><p>HTML5 集成，默认使用了很多 HTML5 的特性，并且使其兼容旧版本浏览器</p></li>
</ul>

<p>大量针对服务器的默认配置，无需修改即可配置一个安全、标准的 web 服务器</p>

<p>完整的 JS 调试机制 —— 即使在 IE 下</p>

<ul>
<li><p>大量使用 CSS3 技术，并且集成了几乎所有来自框架中和技术大牛们口头相传的 CSS 技巧</p></li>
<li><p>压缩包内包含了 一个干净、移动终端友好的HTML模版；优化过的Google统计代码；触摸屏设备上使用的图标；还有丰富的文档、技巧、窍门</p></li>
<li><p>包含了 Normalize.css— 一个先进的、支持HTML5的CSS reset — 和基础样式、辅助功能、media queries、打印样式</p></li>
<li><p>自带了两个优秀的Javascript工具库的最新版本： jQuery (默认链接到 Google的CDN, 如果CDN失效，本地文件作为后备) 和Modernizr 浏览器特性监测工具库，可以检测浏览器对新特性的支持能力，方便针对旧版本浏览</p></li>
<li><p>为所有浏览环境做了优化，包括移动版本和打印版本</p></li>
</ul>

<p>二、如何使用H5BP</p>

<ol>
  
<li>下载H5BP
  
<P>下载地址：<a href="https://html5boilerplate.com/">HTML5 Boilerplate(H5BP)</a>
  
</P>
  
</li>
  
<li>删除不必要的样板文件
  
<p>删除下列只与H5BP有关的文件：<br>
  
- CHANGELOG.md<br>
  
- CONTRIBUTING.md<br>
  
- doc文件夹及其内容<br>
  
- 删除css文件夹内不需要的样式文件<br>
  
</p></li>
  

  
<li>理解样板中的.htaccess文件<br>
  
建议先看一遍H5BP的文档（<a href="https://html5boilerplate.com/">https://html5boilerplate.com/</a>），此文件本身也有详细的注释，可以打开编辑器从头到尾看一遍，这个文件夹的内容不全都有用，主要取决于你的主机设置和站点需求，不过这个文件的一个主要用途是保证站点性能最优。
  
<p></p></li>
  

  
<li>可选择更新的样板文件<br>
  
<p>样板中的下列文件提供了项目的标准信息，根据需要可以更新它们：<br>
  
- humans.txt:这个文件记载了贡献者，H5BP、Bootstrap等<br>
  
- LICENSE.md:在H5BP许可前面，可加上你基于该许可构建的网站的许可信息，在H5BP许可之后，加上Bootstrap以及其他站点中用到的重要的库的许可信息。<br>
  
- README.md:加上自己的项目说明信息并更新这个文件。</p></li>
  

  
<li>更新站点桌面图标和触摸设备图标<br>
  
不要忘了用自己项目的图标替换H5BP默认的图标文件，包括以下图标:<br>
  
- apple-touch-icon.png:为确保所有移动设备都有最佳效果，这个图标应该是144px*144px方形图标<br>
  
- favicon.ico:32px方形图标<br>
  
<p></p></li>
  

  
<li>加入Bootstrap
  
文件
  
<p>
  
现在我们考虑把H5BP和bootstrap结合使用，我们需要从bootstrap提供的一大推文件中选出需要的部分：<br>  

  
<strong>- 字体：</strong><br>把fonts文件夹复制到H5BP文件夹的根目录，这个文件夹包含bootstrap重要的Glyphicon字体。<br>为保险起见，在这个fonts文件夹建一个.hatccsee文件，防止因为越来越多的CDN为你的网站缓存静态资源，如果没有这个文件某些浏览器会拒绝识别你的WEB字体，在创建的.hatccss文件中添加如下代码：<br>
  
<img src="http://7xpt78.com1.z0.glb.clouddn.com/H5BP.png"><br>  

  
<strong>- JavaScript<br></strong>
  
在js目录下创建一个bootstrap文件夹，然后把bootstrap的js脚本文件拷到这个文件夹下，便于优化网站性能，即可按需选用插件、排除其他文件并缩减文件大小。<br>
  
H5BP采用的方法是将所有的插件代码都复制到plugins.js模板文件，这是结束开发之后的最佳做法，因为这样可以减少http请求，加快站点的加载速度。所有现在我们需要找到Bootstrap文件夹下的bootstrap.min.js文件，打开->全选代码->复制->粘贴到plugins.js模板文件中->保存并退出。<br>  

  
<strong>- css文件<br></strong>  
<ol>
  
<li>第一种方法：可以直接把bootstrap的样式大文件拷贝到css文件夹内;</li>
  
<li>第二种方法：把bootstrap中重要的less文件夹全部复制过来：把bootstrap/less文件夹复制到H5BP文件夹的根目录下，然后使用less自定义编译css文件到css文件夹中。</li>  
</ol>
  

<p></p></p>

<p></li></p>

<p><li>大盘点</p>

<p>
  
此时的项目文件结构如下：<br>
  
<img src="http://7xpt78.com1.z0.glb.clouddn.com/H5BP3.png"><br>
  
</p>
  

<p></li></p>

<p></ol></p>

            ]]>
        </content>
    </entry>
    
    <entry>
        <title><![CDATA[sublime text插件推荐]]></title>
        <author><name>xtt</name><uri>http://xuting.me/</uri></author>
        <link href="http://xuting.me/sublime_text_plug/"/>
        <updated>2016-07-23T13:00:00Z</updated>
        <published>2016-07-23T13:00:00Z</published>
        <id>http://xuting.me/sublime_text_plug/</id>
        <content type="html">
            <![CDATA[
             <blockquote>
<p>用了Sublime Text有一段时间了，之前被周围的几个前端小伙伴灌输的思想就是，牛b的前端程序员都是手写代码的，用代码提示啥的都low，然而上班之后被公司同事吐槽开发效率太低，因为不想换编辑器所以去下载了几个插件，发现写代码时的幸福感大大提升了  </p>
</blockquote>

<h3>一.Package Control</h3>

<blockquote>
<p>这是使用sublime text首先要装的插件，因为这是一个插件包，有了这个之后可以方便的安装、升级、删除其它插件。  </p>
</blockquote>

<p>1.快速安装：<br/>  </p>

<p>[sublime text2:]<br/><br/>
使用Ctrl+快捷键或者通过View-&gt;Show Console菜单打开命令行，粘贴如下代码：<br/>  </p>

<pre><code>import urllib.request,os; pf = &#39;Package Control.sublime-package&#39;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), &#39;wb&#39;).write(urllib.request.urlopen( &#39;http://sublime.wbond.net/&#39; + pf.replace(&#39; &#39;,&#39;%20&#39;)).read())</code></pre>

<p>[sublime text3:]<br/><br/>
使用Ctrl+快捷键或者通过View-&gt;Show Console菜单打开命令行，粘贴如下代码：<br/>  </p>

<pre><code>import urllib2,os; pf=&#39;Package Control.sublime-package&#39;; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler( ))); open( os.path.join( ipp, pf), &#39;wb&#39; ).write( urllib2.urlopen( &#39;http://sublime.wbond.net/&#39; +pf.replace( &#39; &#39;,&#39;%20&#39; )).read()); print( &#39;Please restart Sublime Text to finish installation&#39;)</code></pre>

<p>2.手动安装  </p>

<p>如果快速安装不成功的话，下载Package Control插件包手动解压到到插件目：<br/><br/>
（1）点击Preferences &gt; Browse Packages菜单<br/><br/>
（2）进入打开的目录的上层目录，然后再进入Installed Packages/目录<br/><br/>
（3）下载Package Control插件包并复制到Installed Packages/目录<br/><br/>
（4）重启Sublime Text。<br/>  </p>

<p>3.用Package Control安装插件的方法<br/>
（1）按下Ctrl+Shift+P调出命令面板<br/>
（2）输入install 调出 Install Package 选项并回车，然后在列表中选中要安装的插件即可自动下载安装。<br/>
（3）安装成功后在Preferences &gt;package settings目录下即可看到已经成功安装的插件，可以查看和自定义每个插件绑定的快捷键和参数设置。  </p>

<h3>二.相关插件</h3>

<blockquote>
<p>安装插件的方法已经介绍完了，下面开始介绍一些有用的Sublime Text插件：  </p>
</blockquote>

<h4>1.Emmet</h4>

<p>如果你是前端开发者，这个插件会大大的提高编码效率。例如：ul&gt;li*4 按下扩展键则立即生成一个四行的列表。插件文档：<a href="http://emmet.io/">http://emmet.io/</a>  </p>

<h4>2.JsFormat</h4>

<p>一个JS代码格式化插件。  </p>

<h4>3.CSSComb</h4>

<p>这是用来给CSS属性进行排序的格式化插件。如果你想保持的代码干净整洁，并且希望按一定的顺序排列，那么这个插件是一种有效解决的方案。  </p>

<h4>4.DocBlockr</h4>

<p>DocBlockr 可以使你很方便地对代码添加注释。在js的代码里的函数前面输入／＊＊按tab键，它会解析函数，变量，和参数，根据它们自动生成注释规范，你的工作就是去填充对应的说明。  </p>

<h4>5.Side Bar</h4>

<p>侧边栏功能加强插件，可以直接在sublime里面对文件执行很多复杂操作。  </p>

<h4>6.ColorPicker</h4>

<p>通常，如果我们需要一个调色盘的时候，我们习惯使用Photoshop或者其他工具。但是一个完整的选色工具可以直接在你的编辑器中使用- Ctrl/Cmd + Shift + C。  </p>

<h4>7. Colorcoder</h4>

<p>高亮所有变量，因此可以极大的简化代码定位。尤其是对那些有阅读障碍的程序员非常有帮助。  </p>

<h4>8.AutoFileName</h4>

<p>自动补全文件路径&mdash;非非常方便。  </p>

<h4>9.Better Completion</h4>

<p>提供Bootstrap，jQuery,JS,html等代码提示补全，我觉得这个很好用，很多时候会忘记一些函数属性名，有了这些自动提示效率和正确率都会提高很多。<br/><br/>
这个安装好后需要自行配制，CTRL+SHIFT+P或者 CMD+SHIFT+P之后在弹出的窗口中输入“sbc settings user”打开配置文件，输入下列代码，把需要代码提示的选项参数设置为true：  </p>

<pre><code>{  
// --------------------  
// sublime-better-completions-Package (sbc package)  
// --------------------  
// API files is contains the *keyword* such as `html`, `jquery`, `myglossary` with lowercase as filename `sbc-api-${filename}.sublime-settings` place in `/packages/User/` (your own) or `/packages/${this-package}/sublime-completions/` (package build-in).  
// After you enable, disable or added new your own completions, you might need restart your Sublime Text Editor.  
//  
// Your own setting file `sbc-setting.sublime-settings` need to place in `/packages/User/` and contains all your api setting property that you want to enable.  
//  
// --------------------  
// APIs Setup  
// --------------------  
// `true` means enable it.  
// `false` means disable it.  
&quot;completion_active_list&quot;: {  
    // build-in completions  
    &quot;css-properties&quot;: false,  
    &quot;gruntjs-plugins&quot;: false,  
    &quot;html&quot;: false,  
    &quot;lodash&quot;: false,  
    &quot;javascript&quot;: false,  
    &quot;jquery&quot;: false,  
    &quot;jquery-sq&quot;: false, // Single Quote  
    &quot;php&quot;: false,  
    &quot;phpci&quot;: false,  
    &quot;sql&quot;: false,  
    &quot;twitter-bootstrap&quot;: false,  
    &quot;twitter-bootstrap-less-variables&quot;: false,  
    &quot;twitter-bootstrap3&quot;: false,  
    &quot;underscorejs&quot;: false,  
    // Your own completions?  
    // ~/Library/Application\ Support/Sublime\ Text\ 3/Packages/User/sbc-api-my-angularjs.sublime-settings  
    &quot;my-angularjs&quot;: false,  
    // ~/Library/Application\ Support/Sublime\ Text\ 3/Packages/User/sbc-api-my-glossary.sublime-settings  
    &quot;my-glossary&quot;: false,  
    // ~/Library/Application\ Support/Sublime\ Text\ 3/Packages/User/sbc-api-my-html.sublime-settings  
    &quot;my-html&quot;: false,  
    // ~/Library/Application\ Support/Sublime\ Text\ 3/Packages/User/sbc-api-my-javascript.sublime-settings  
    &quot;my-javascript&quot;: false  
}  
}</code></pre>

<h4>10.MarkdownEditing</h4>

<p>Markdonw编辑提供语法高亮，缩略词，自动补全，配色方案。  </p>

<h4>11.SublimeREPL</h4>

<p>SublimeREPL 可以直接在编辑器中运行一个解释器，支持很多语言：Clojure, CoffeeScript, F#, Groovy, Haskell, Lua, MozRepl, NodeJS, Python, R, Ruby, Scala, shell.使用说明文档：<a href="http://sublimerepl.readthedocs.io/en/latest/">http://sublimerepl.readthedocs.io/en/latest/</a></p>

            ]]>
        </content>
    </entry>
    
    <entry>
        <title><![CDATA[是结束也是开始]]></title>
        <author><name>xtt</name><uri>http://xuting.me/</uri></author>
        <link href="http://xuting.me/end_and_start/"/>
        <updated>2016-06-29T23:00:00Z</updated>
        <published>2016-06-29T23:00:00Z</published>
        <id>http://xuting.me/end_and_start/</id>
        <content type="html">
            <![CDATA[
             <blockquote>
<p>窗外还在下雨，一个人窝在酒店里听了一晚上的歌，1号就要上班然而房子还没有弄好。今天清空了宿舍，爸爸和舅舅三两下把包裹搬好就出发来上海了，没有同学送别没有留恋，只有内心无人察觉的稍稍伤感。吃了无数顿散伙饭，说了无数次的有缘再见，今天才是真的再见，或者再也不见。  </p>
</blockquote>

<p>&nbsp; &nbsp; &nbsp; &nbsp;从毕业设计到现在玩了一个多月，很久没有写博客，很久没有静下心来看书敲代码，没有疯狂但也是一个很开心的毕业季。6月初一行人去了云南旅行，大理丽江苍山洱海玉龙雪山，天美水美景美人美，唯一的遗憾就是旅程太匆忙不能慢慢感受，有机会希望再去一次，在那住上半个月，去丽江酒吧把这次没来及唱的那首歌补上。接着就是毕业晚会，跳了一个逗逼的舞蹈唱了首不算太伤感的歌，圆了毕业前的最后一个心愿。学位授予仪式那天没能抱到熊校长也是一大遗憾，下雨天湿嗒嗒油腻腻的我被接受电视台采访，谈及熊校长迷妹本质暴露无疑＝＝毕业的最后印象被定格在电视荧幕上也算是一个纪念了。<br/><br/>
&nbsp; &nbsp; &nbsp; &nbsp;一不留神又写起了流水账，本来是听歌听到忧伤的想抒情一下，谁知回忆起这一个月的事情心情变好了很多，看来人是要经常记录经常回忆开心的事情。<br/><br/>
&nbsp; &nbsp; &nbsp; &nbsp;用什么来形容大学毕业合适呢？公交车的某一站台？虽然下了车但是终点还很遥远，还需要一个人走很长的路看很多的风景。毕业之前我总是害怕长大，害怕变老，希望简单、单纯、自由、任性；毕业之后我知道长大不可避免，但我害怕吗，好像并不，离开苏州，离开小伙伴好朋友们一个人来到上海，我一点也不害怕，因为这是我想做的，既然长大和变老都不能避免，最好的生活状态就是活出自己，在力所能及的情况下做自己想做的事情，我知道自己会一直保持一个孩子心，善良、好奇、自由、冒险，虽然这对于踏入社会的人来说并不是一件好事，但没有人知道什么样的我才是最好的，所以现在就是最好的时光。珍惜现在，多看书多学习，多做自己想做的事情。<br/><br/>
&nbsp; &nbsp; &nbsp; &nbsp; 《行歌》里说成长是一场冒险，勇敢的人先上路，代价是错过风景，不能回头。不能回头是真，错过风景是假，勇敢的人会看到更多的风景。</p>

            ]]>
        </content>
    </entry>
    
    <entry>
        <title><![CDATA[个人博客开发－笔记]]></title>
        <author><name>xtt</name><uri>http://xuting.me/</uri></author>
        <link href="http://xuting.me/personal_blog/"/>
        <updated>2016-04-27T14:30:00Z</updated>
        <published>2016-04-27T14:30:00Z</published>
        <id>http://xuting.me/personal_blog/</id>
        <content type="html">
            <![CDATA[
             <blockquote>
<p>本文只是总结和概括部分开发一个基于django的个人博客的相关内容，并没有详细解释，仅供日后查阅和复习。  </p>
</blockquote>

<h3>一、总览</h3>

<h4>1. 需要完成的任务</h4>

<ul>
<li>建立一个开发环境 - 包括如何使用终端,安装Pip,如何使用Git等等.<br/></li>
<li>建立一个Django项目,创立一个基本的Django应用.<br/></li>
<li>为Django项目设立静态文件和其他文件<br/></li>
<li>使用Django的Model-View-Template(MVT)设计模式<br/></li>
<li>创建数据库模型,用Django提供的对象关系绑定功能<br/></li>
<li>利用数据库模型生成的数据来创建动态生成页面<br/></li>
<li>使用Django提供的用户认证服务<br/></li>
<li>整合应用的外部服务<br/></li>
<li>一个web应用所包括的CSS和JavaScript<br/></li>
<li>设计和应用CSS来增加web应用的界面交互<br/></li>
<li>使用Django的cookies和sessions<br/></li>
<li>在应用中使用像AJAX这样的高级功能<br/></li>
<li>用PythonAnywhere部署你的应用到web服务器<br/></li>
</ul>

<h4>2. n层结构</h4>

<p>大多数web应用的结构是3-层结构.<br/>
如果我们用Django来创建web应用的话,我们每层需要如下技术.  </p>

<blockquote>
<p>(1) client是一个浏览器(i.e. Chrome, Firefox, Safari等等),它将返回 HTML/CSS页面.<br><br/>
(2) middleware是一个Django应用,它会贯穿开发Django内建web服务的始终.<br><br/>
(3) database;search API<br>  </p>
</blockquote>

<h4>3.页面和url映射</h4>

<h4>4.实体关系图</h4>

<h3>二、开发准备</h3>

<p>1.安装python<br><br/>
2.安装django<br><br/>
3.安装git<br><br/>
4.搭建虚拟环境<sbr>  </p>

<h3>三、django基础</h3>

<h4>1.测试django是否安装成功</h4>

<h4>2.创建django项目：</h4>

<blockquote>
<p>python django-admin.py startproject <name>来创建项目,这里<name>是你希望的项目名.  </p>
</blockquote>

<h4>3.创建django应用：</h4>

<blockquote>
<ol>
<li>$ python manage.py startapp <appname>来创建新的应用,这里<appname>是你的应用名.通过把新应用名字加入到settings.py文件的INSTALLED_APPS元组里来告诉Django项目添加了新的应用.<br/></li>
<li>在项目的urls.py文件映射应用.<br/></li>
<li>在应用目录里创建urls.py文件使URL字符串指向视图.<br/></li>
<li>在应用的view.py里,创建的视图要确保返回一个HttpResponse对象.<br/></li>
</ol>
</blockquote>

<h4>4.创建视图</h4>

<blockquote>
<p>配置view.py  </p>
</blockquote>

<h4>5.URL映射</h4>

<blockquote>
<p>给每一个应用配置urls.py文件，然后汇总到根目录下的urls.py文件  </p>
</blockquote>

<h3>四、模版与静态媒体的基本流程</h3>

<ol>
<li>首先,创建你希望使用的模板并把它保存在templates目录里,这个目录需要你写入settings.py文件.你可以在模板里使用Django模板变量(例如{{ bariable_name }}).你可以在视图里更换这些变量.<br/></li>
<li>在应用的views.py文件里查找或者创建一个新的视图.<br/></li>
<li>增加视图逻辑.例如你可以从数据库里获得数据.<br/></li>
<li>在视图里,创建一个字典对象可以吧模板内容传递给模板引擎.<br/></li>
<li>使用render()函数来生成返回.确保引用request,然后是模板文件,最后是内容字典!<br/></li>
<li>如果你还没有修改urls.py文件或者应用中的urls.py中的映射,你需要修改一下.<br/></li>
<li>在页面上获取一个静态媒体文件.<br/></li>
<li>把你要添加的静态文件放入static目录.这个目录是你在settings.py中设置的STATICFILES_DIRS元组.<br/></li>
<li>在模板中添加静态媒体引用.例如一个HTML网页的图片用<img />标签.<br/></li>
<li>记得用{% load staticfiles %}和{% static &ldquo;filename&rdquo; %}命令在模板中设置静态文件.<br/></li>
</ol>

<h3>五、模型与数据库</h3>

<h5>1. 确定需求</h5>

<h5>2. 设置数据库</h5>

<blockquote>
<p>当开始新Django项目,需要先告诉Django你想使用的数据库(例如设置settings.py中的DATABASES).你也可以在admin.py文件里注册任何模型.  </p>
</blockquote>

<h5>3. 加入模型</h5>

<blockquote>
<p>(1) 首先,在你的应用里的models.py文件里创建新的模型.<br/><br/>
(2) 修改admin.py注册你新加的模块.<br/><br/>
    (3) 然后进行迁移$ python manage.py sqlmigrate <app_name><br/><br/>
    (4) 使用$ python manage.py migrate应用更改.这将会为你的模型在数据库里建立必要的结构.<br/><br/>
    (5) 为你的新模型创建/修改population script.<br/></p>
</blockquote>

            ]]>
        </content>
    </entry>
    
    <entry>
        <title><![CDATA[忙碌的毕业季]]></title>
        <author><name>xtt</name><uri>http://xuting.me/</uri></author>
        <link href="http://xuting.me/graduate/"/>
        <updated>2016-04-23T20:00:00Z</updated>
        <published>2016-04-23T20:00:00Z</published>
        <id>http://xuting.me/graduate/</id>
        <content type="html">
            <![CDATA[
             <blockquote>
<p>月份快要结束了，感觉离毕业又近一步了。看了几届学长学姐拍毕业照，去毕业旅行，忙碌在找实习找工作和毕业设计中，现在终于轮到自己了。<br/>  </p>
</blockquote>

<p>&nbsp; &nbsp; &nbsp; &nbsp;实习了一个多月，虽然有点累，但是每天按时上班也是最近最开心的事情了。还没有接触到社会的险恶所以没有害怕踏入这个社会，只是偶尔看到鸡汤告诫你选择比努力更重要的时候心里会犹豫一下。考研失利然后就去实习了，但是并没有太多的难过和遗憾，总觉得人生不是一次考试就能决定的了的，就算是自我安慰吧。但是好在我对自己的未来并没有很模糊，虽然不知道前端前景如何，但是现在不停的学习和从事这个工作很开心。我不知道以后会成为怎么的人，会有什么样的作为，唯一能够确定的是我一定会做自己喜欢的事情，或许它不是一件轻松的事。<br/><br/>
&nbsp; &nbsp; &nbsp; &nbsp;为了毕设的中期检查熬了一个星期的夜，早上依旧要精神满满的去上班，天之道我是有多讨厌写文档，最近上班已经成为生活中唯一的乐趣了，可以让我暂且忘记要写文档这件事唉。。。<br/><br/>
&nbsp; &nbsp; &nbsp; &nbsp;在这个阴雨绵绵的周末，一个人坐在咖啡厅看书敲代码，看起来很悠闲惬意的事但难免让人心生孤独。虽然现在很享受一个人的生活，但是偶尔还是会矫情一把。我还不知道有哪些更好的方法让自己慢慢变的内心沉稳，听说读书使人沉稳，所以现在多读书吧，努力做一个不浮躁的人。以前不相信毕业季就是分手季，现在我相信了，一年半的感情就这样说断就断了，连一句话的回复的没有，可能我们都是狠心的人吧。一直不愿意和别人细说这件事，不想成为喋喋不休抱怨自己委屈的怨妇，因为我一直是一个酷酷的girl，我知道自己喜欢什么不喜欢什么，我知道该争取什么知道该放弃什么。虽然有时候还是害怕夜里听情歌，害怕翻以前的照片，害怕听到以前的录音，但是我知道时间可以冲淡一切。每当这个时候我都会提醒自己，在人这一生的时间洪流中失恋并不是什么大事，注定不能厮守的人耗在一起也只是彼此浪费时间。回忆总是美好的是因为大脑具备遗忘痛苦的功能，怀旧是一种错觉，其实可能只不过是幻觉。每个人都有使自己的记忆变得更加清白更加美好的倾向，所以往往会对自己的记忆进行各种形式的修补，甚至进一步的加工才会觉得心满意足。所以要不停的提醒自己永远不要陷入好了伤疤完了疼的循环。我不想成为表面洒脱实际悲伤逆流成河的苦情深情代表，我只希望自己可以内心沉稳表面单纯，由内而外而不是由外而内。<br/><br/>
&nbsp; &nbsp; &nbsp; &nbsp; 虽然还是会偶尔为自己的才疏学浅，技术太渣而心生自卑，但是一直努力吧，即使不那么聪明过人也要相信越努力越幸运。毕竟人还是需要点鸡汤信念的。  </p>

            ]]>
        </content>
    </entry>
    
</feed>